{"version":3,"sources":["components/NewsList/NewsItem/NewsItem.js","components/NewsList/Category/Category.js","components/NewsList/NewsList.js","components/SideBar/SideBar.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["NewsItem","state","fullView","handleOnViewClick","setState","title","desc","content","source","imageUrl","publishedAt","url","this","props","loaded","toString","substring","length","Date","TimeAgo","addLocale","en","format","newsItemImage","src","alt","className","newsItem","target","href","onClick","Fragment","React","Component","category","NewsList","newsToRender","style","marginTop","marginLeft","marginRight","marginBottom","alignSelf","newsList","map","news","urlToImage","name","key","description","SideBar","handleOnOptionsClick","option","onOptionsClick","to","pathname","exact","topHeadlines","apiKey","Layout","getInitialNews","axios","get","then","response","data","articles","catch","error","console","log","getIndiaTopHeadlines","getCategoricalNews","cat","getNewsFromSource","handleOnOptionClick","searchBarChanged","event","preventDefault","App","path","component","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.81661676.chunk.js","sourcesContent":["import React from 'react';\nimport './NewsItem.css';\nimport TimeAgo from 'javascript-time-ago';\nimport en from 'javascript-time-ago/locale/en'\nclass NewsItem extends React.Component{\n    state={\n        fullView:false,\n    }\n    handleOnViewClick=()=>{\n      this.setState({fullView:true})\n    };\n\n    render() {\n        let title = null;\n        let desc = null;\n        let content = null;\n        let source = null;\n        let imageUrl = null;\n        let publishedAt = null;\n        let url = null;\n        if(this.props.loaded){\n            title = this.props.title;\n            desc = this.props.desc;\n            content = this.props.content;\n            source = this.props.source;\n            imageUrl = this.props.imageUrl;\n            publishedAt = this.props.publishedAt;\n            url = this.props.url;\n\n        }\n        if(content){\n            content = content.toString();\n            content = content.substring(0,content.length-13);\n        }\n        publishedAt =publishedAt.toString();\n        publishedAt = new Date(publishedAt);\n        TimeAgo.addLocale(en);\n        const timeAgo = new TimeAgo('en-US');\n        publishedAt = timeAgo.format(publishedAt);\n        const newsItemImage = <img src={imageUrl}\n                                 alt={title}\n                                 className={this.state.fullView?'newsItemImageFullView':'newsItemImage'}\n                                />;\n        let newsItem = (\n            <div className='newsItem'>\n                {newsItemImage}\n                <div className=\"newsContainer\">\n                    <a target='_blank' href={url}><h5>\n                        {title}\n                    </h5>\n                    </a>\n                    <p className='desc'>{desc}</p>\n                    <button onClick={this.handleOnViewClick}>View </button><br/>\n                    <small className='sourceText'>{source} | {publishedAt}</small>\n                </div>\n            </div>\n        );\n        if(this.state.fullView){\n            newsItem=(\n                <div className='newsItem'>\n                    {newsItemImage}\n                    <div className=\"newsContainer\">\n                        <a target='_blank' href={url}><h5>\n                            {title}\n                        </h5>\n                        </a>\n                        <p className='desc'>{desc}</p>\n                        <p>{content}</p>\n                        <small className='sourceText'>{source} | {publishedAt}</small>\n                    </div>\n                </div>\n            )\n        }\n        return(\n            <React.Fragment>\n                {newsItem}\n            </React.Fragment>\n        );\n    }\n}\nexport  default NewsItem;","import  React from 'react';\nimport './Category.css';\nconst category=(props)=>{\n    return(\n        <div className='category'>\n            {props.category}\n        </div>\n    );\n};\nexport default category;","import React from 'react';\nimport NewsItem from './NewsItem/NewsItem';\nimport './NewsList.css';\nimport Category from './Category/Category';\nclass NewsList extends React.Component{\n    render() {\n        let newsToRender=<p style={{\n            marginTop:\"50vh\",\n            marginLeft:'50vh',\n            marginRight:'50vh',\n            marginBottom:'50vh',\n\n            alignSelf:\"center\",\n        }}>Loading...</p>;\n        if (this.props.loaded) {\n             newsToRender = this.props.newsList.map((news) => {\n                return <NewsItem\n                    loaded={this.props.loaded}\n                    imageUrl={news.urlToImage}\n                    source={news.source.name}\n                    key={news.title}\n                    title={news.title}\n                    desc={news.description}\n                    content={news.content}\n                    publishedAt={news.publishedAt}\n                    url={news.url}\n\n                />;\n            });\n        }\n        return (\n            <div>\n                <section className='newsListContainer'>\n                    <>\n                    {newsToRender}\n                    </>\n                    </section>\n            </div>\n        );\n    }\n}\nexport  default NewsList;","import React from 'react';\nimport './SideBar.css';\nimport {Link, NavLink} from \"react-router-dom\";\nclass SideBar extends React.Component{\n    handleOnOptionsClick =(option)=>{\n      this.props.onOptionsClick(option);\n    };\n    render() {\n        const homeParams ={\n            pathname:'/in',\n        };\n        const techParams = {\n            pathname: '/technology',\n        };\n        const sportsParams = {\n            pathname: '/sports',\n\n        };\n        const bbcParams = {\n            pathname: '/bbc',\n        };\n\n        return(\n            <div className='SideBar'>\n                <nav>\n                    <ul>\n                        <li onClick={() =>this.handleOnOptionsClick('home')}>\n                            <NavLink to={{pathname:'/',state:'home'}} exact> Home</NavLink></li>\n                        <li onClick={() =>this.handleOnOptionsClick('in')}>\n                            <NavLink to={homeParams}>India</NavLink></li>\n                        <li onClick={() =>this.handleOnOptionsClick('tech')}>\n                            <NavLink to={techParams}>Tech</NavLink></li>\n                        <li onClick={() =>this.handleOnOptionsClick('sports')}>\n                            <NavLink to={sportsParams}>Sports</NavLink></li>\n                        <li onClick={() =>this.handleOnOptionsClick('bbc')}>\n                            <NavLink to={bbcParams}>BBC</NavLink></li>\n\n                    </ul>\n                </nav>\n            </div>\n        );\n    }\n}\nexport  default SideBar;","import  React from 'react';\nimport NewsList from '../NewsList/NewsList';\nimport SideBar from '../SideBar/SideBar';\nimport './Layout.css'\nimport axios from \"axios\";\n\nimport Category from '../NewsList/Category/Category';\n\nconst API_KEY = 'eb6408d7171b409980b3d243ec54c9aa';\nconst topHeadlines = 'https://newsapi.org/v2/top-headlines?';\nconst apiKey = 'apiKey='+API_KEY;\n\nclass Layout extends React.Component{\n    state ={\n        newsList:null,\n        loaded:false,\n        category:'Headlines',\n    };\n    componentDidMount() {\n        //display news for google news for homepage other categories from props\n        this.getInitialNews();\n    }\n    getInitialNews=()=>{\n        this.setState({category:'Headlines'})\n        let url = topHeadlines +\n            'sources=google-news&'+\n            apiKey;\n        axios.get(url).\n        then((response)=>{\n            const newsList = response.data.articles;\n            this.setState({newsList:newsList,loaded:true,category:'Headlines'});\n        }).\n        catch((error)=>{\n            console.log(error);\n        });\n    };\n    getIndiaTopHeadlines=()=>{\n        this.setState({category:'India'})\n        let url = topHeadlines +\n            'country=in&'+\n            apiKey;\n        axios.get(url).\n        then((response)=>{\n            const newsList = response.data.articles;\n            this.setState({newsList:newsList,loaded:true,category:'India'});\n        }).\n        catch((error)=>{\n            console.log(error);\n        });\n    };\n    getCategoricalNews =(category)=>{\n        let url = topHeadlines +\n            'country=in&'+\n            'category='+ category+'&'+\n            apiKey;\n        let cat=null;\n        if(category==='technology'){\n            cat = 'Technology';\n        }\n        else if(category==='sports'){\n            cat = 'Sports'\n        }\n        this.setState({category:cat});\n        axios.get(url).then((response)=>{\n            const newsList = response.data.articles;\n\n            this.setState({newsList:newsList,loaded:true,category:cat});\n        }).catch((error)=>{\n            console.log(error);\n        });\n    };\n    getNewsFromSource =(source)=>{\n        this.setState({category:'BBC'})\n        let url = topHeadlines +\n            'sources='+source +'&'+\n            apiKey;\n        axios.get(url).then((response)=>{\n            const newsList = response.data.articles;\n            this.setState({newsList:newsList,loaded:true,category:'BBC'});\n        }).catch((error)=>{\n            console.log(error);\n        });\n    };\n    handleOnOptionClick =(option)=>{\n        this.setState({loaded:false});\n        if(option === 'home'){\n            this.getInitialNews();\n        }\n        if(option === 'in'){\n            this.getIndiaTopHeadlines();\n        }\n        if(option=== 'tech'){\n            this.getCategoricalNews('technology');\n        }\n        if(option === 'sports'){\n            this.getCategoricalNews('sports');\n        }\n        if(option === 'bbc'){\n            this.getNewsFromSource('bbc-news');\n        }\n    };\n    searchBarChanged =(event)=>{\n        event.preventDefault();\n\n    }\n       render() {\n           return(\n               <div className='container'>\n                   <SideBar\n                       onOptionsClick ={(option)=> this.handleOnOptionClick(option)}\n                   />\n                   <Category category={this.state.category} />\n                   <NewsList newsList = {this.state.newsList}\n                             category={this.state.category}\n                             loaded={this.state.loaded}/>\n               </div>\n           );\n       }\n};\nexport default Layout;","import React from 'react';\nimport './App.css';\nimport Layout from './components/Layout/Layout';\nimport {Switch,Route}from 'react-router-dom';\nimport NewsList from \"./components/NewsList/NewsList\";\nfunction App() {\n  return (\n\n          <div className=\"App\">\n            <Layout/>\n            <Switch>\n                {/*<Route path='/in' component={NewsList}/>*/}\n                {/*<Route path='/sports' component={NewsList}/>*/}\n                {/*<Route path='/technology' component={NewsList}/>*/}\n                <Route path='/' component={NewsList}/>\n            </Switch>\n        </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nconst app = (\n  <BrowserRouter>\n      <App/>\n  </BrowserRouter>\n);\nReactDOM.render(app, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}